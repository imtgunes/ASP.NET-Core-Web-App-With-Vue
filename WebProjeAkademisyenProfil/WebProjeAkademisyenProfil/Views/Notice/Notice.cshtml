@{
    Layout = "_Layout";

}
@model IEnumerable<WebProjeAkademisyenProfil.Models.Category>

<div id="notice" class="row">
    <div class="col col-2 col-lg-3 col-xs-4 col-sm-5 col-md-4 col-xl-2 z-1">
        <div id="sideNav" class="d-flex flex-column flex-shrink-0 p-3 text-white bg-dark "
             style="width: 280px; height: 100vh;">
            <div href="/" class="align-items-center mb-3 text-white text-decoration-none text-center rounded mt-5">
                <img id="profileImage" src="@ViewBag.Image" class="rounded" width="170" height="210" />

            </div>
            <h1 class="fs-6 text-center sideNav-header">Öğr. Gör. @ViewBag.Name @ViewBag.SurName</h1>
            <hr>
            <ul class="nav nav-pills flex-column mb-auto">
                @foreach (var item in Model)
                {
                    <li class="nav-item">
                        <a href="/@item.CategoryRedirect/" class="nav-link text-white">
                            <i class="@item.CategoryIcon sideNav-icon"></i>
                            <span class="sideNav-text">@item.CategoryName</span>
                        </a>
                    </li>

                }

            </ul>

        </div>
    </div>

    <div class="col col-10 col-lg-9 col-xs-8 col-sm-7 col-md-8 col-xl-10 main-Content">
        <div class="container main-container">
            <span class="deneme"></span>
            <div class="text-center mb-5">
                <h2 class="mainContainerHead">Bildiriler</h2>
            </div>

            <ul class="mainList mt-5 ms-3 me-2">
                <li v-for="(not, index) in veriler">
                    <strong>{{ index + 1 }}-</strong> <strong>{{ not.noticeType }}</strong> &nbsp; {{not.noticeInfo}}
                </li>
            </ul>

        </div>

    </div>
</div>

<script src="~/vue/vue.global.js"></script>
<script src="~/axios/axios.js"></script>

<script>

    const { createApp, ref, computed } = Vue;
    const app = createApp({

        data() {

            return {
                veriler: null
            }
        },
        mounted() {
            let userId = this.getCookie('userID');

            if (!userId && userId == false) {
                userId = 1;
            }
            axios
                .get(userId)
                .then((response) => {
                    this.veriler = response.data;
                });


        },
        methods: {
            getCookie(name) {
                var pattern = RegExp(name + "=.[^;]*")
                var matched = document.cookie.match(pattern)
                if (matched) {
                    var cookie = matched[0].split('=')
                    return cookie[1]
                }
                return false
            }
        },
    });
    app.mount("#notice");



</script>


